firstguess_Restore
1
28
neuralNetStruct.modelVariability=1; %1=a different model for each cell, 2=same model for flagRegioMat';
neuralNetStruct.typeOfModel=2; %2=REG 3=RF random forest, 4=ann;
neuralNetStruct.pcaFlag=0; %0 means no PCA-noNorm, 1 means PCA-norm;
neuralNetStruct.nPrec=5; %5 for PM, 2 for O3 (nox, voc), 1 for NO2 (nox);
neuralNetStruct.absDel=1; %absolute(0) or delta(1) values;
neuralNetStruct.arealPoint=0; %0 means areal and point summed up, 1 means areal and point separated;
neuralNetStruct.domain='ineris_7km_deliver_20150831';
neuralNetStruct.flagReg='ineris_7km_deliver_20150831';
neuralNetStruct.rad=[50 50 50 50 50]; %roughly 500km
neuralNetStruct.npat=[1 1 1 1 1];
neuralNetStruct.aqiFil='PM25_Y';%PM25, O3
neuralNetStruct.aqi='PM25';%PM25, O3
neuralNetStruct.nSc=27;
neuralNetStruct.Ide=[1:19];
neuralNetStruct.Val=[20:27];%1:26];
neuralNetStruct.rf=0 %window of cells of training varying F (1=one ring of cells used for training, surrounding the target cell0
neuralNetStruct.function_type=1; %1 means inverse distance 1/d^2, 2 means exponential
[X, Y] = meshgrid(-neuralNetStruct.rad(1):1:neuralNetStruct.rad(1), -neuralNetStruct.rad(1):1:neuralNetStruct.rad(1));
A = 1; x0 = 0; y0 = 0;
neuralNetStruct.coeff=NaN;
neuralNetStruct.sigma_x_gaus = 6; %from 2 to rf/2 both sigma_x_gaus and sigma_x_gaus
neuralNetStruct.sigma_y_gaus = 3; %from 2 to rf/2 both sigma_x_gaus and sigma_x_gaus
neuralNetStruct.theta=0,      %from 0 to pi
a = cos(theta)^2/2/sigma_x_gaus^2 + sin(theta)^2/2/sigma_y_gaus^2;
b = -sin(2*theta)/4/sigma_x_gaus^2 + sin(2*theta)/4/sigma_y_gaus^2 ;
c = sin(theta)^2/2/sigma_x_gaus^2 + cos(theta)^2/2/sigma_y_gaus^2;
neuralNetStruct.F = A*exp( - (a*(X-x0).^2 + 2*b*(X-x0).*(Y-y0) + c*(Y-y0).^2)) ;
intermediateInfo=neuralNetStruct;